package textgame_project;

import java.util.ArrayList;
import java.util.Scanner;

class Creature {
	ArrayList<String> item = new ArrayList<>();
	String name;
	int hp, power, speed;

	public String toString() {
		return "[" + name + "]\n체력 = " + hp + ", 공격력 = " + power + ", 스피드 = " + speed;
	}

	// 상대를 공격하는 메소드
	public static void attack(Creature A, Creature B) {
		B.hp -= A.power;
		System.out.println(A.name + "(이)가 " + B.name + "(을)를 공격했습니다.");
	}

}

//적 객체를 만들기 위한 클래스
class Enamy extends Creature {

	// 생성자
	public Enamy(String name, int hp, int power, int speed) {
		this.name = name;
		this.hp = hp;
		this.power = power;
		this.speed = speed;
	}
}

//플레이어 객체를 만들기 위한 클래스
class Player extends Creature {

	// Player 객체를 호출 시출력되는 문장
	@Override
	public String toString() {
		return "[" + name + "]\n체력 = " + hp + ", 공격력 = " + power + ", 스피드 = " + speed + ", 아이템 = " + item;
	}
}

//게임이 종료될때 출력되는 문장을 포함한 클래스
class Endstory {
	// 플레이어가 승리했을 때 출력되는 문장
	public static void winStory() {
		System.out.println(
				"마을을 지키기 위해 숲 속으로 떠난 용사가 마침대 악의 근원인 Dragon을 물리치자 마을엔 평화가 찾아왔다.\n그로부터 몇년 후... 다시 숲 속에서 정체 모를 소리가 들려오는데...\nTo be continue...");
	}

	// 플레이어가 패배했을 때 출력되는 문
	public static void defeatStroy() {
		System.out.println("모험가는 결국 마을을 지켜내지 못했고...\n마을 사람들은 더욱 절망 속으로 들어갔습니다.");
	}
}

//메인 클래스
public class Textgame_project {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		ArrayList<Creature> monster = new ArrayList<>();

		// 게임에서 사용될 적 객체 생성 (적이름, 체력, 공격력, 스피드)
		monster.add(new Enamy("Slime", 3, 1, 0));
		monster.add(new Enamy("Goblin", 5, 2, 1));
		monster.add(new Enamy("Scorpion", 7, 2, 2));
		monster.add(new Enamy("Dragon", 10, 2, 3));

		// 게임 배경
		System.out.println(
				"한 마을에는 안개가 자욱한 숲이 있었습니다. 이 숲에는 마을을 둘러싼 신비한 힘이 잠들어 있었습니다.\n그러나 어느 날, 이 힘이 깨어났고 악의 존재가 세상에 나타났습니다.\n마을은 위험에 빠져들었고, 마을 사람들은 절망에 빠졌습니다. 그러던 중, 용감한 모험가 한 명이 악의 힘을 물리치기 위해 나서기로 결심합니다.\n그리고 모험가는 숲 속으로 떠나게 되는데, 그는 여러 어려움을 극복하며 악의 근원을 찾아내야 합니다.\n최종 결전에서, 모험가는 마을을 구할 수 있을까요? 아니면 악의 힘에게 지게 될까요? 이 모험가의 운명은 마을과 함께합니다.\n모험을 시작하시겠습니까?(1: YES or 0: NO)");
		int answer = sc.nextInt();

		// 플레이어 객체 생성
		Creature pl = new Player();

		// 플레이어가 모험을 시작했을 때
		if (answer == 1) {
			System.out.println("==========================================");
			System.out.println("모험가의 이름이 무엇입니까? ");
			String name = sc.next();

			// 무기 선택 코드(선택하는 무기에 따라 플레이어의 공격력, 속도가 결정)
			System.out.println("무기를 선택하세요.\n1. 단검\n2. 도끼\n3. 맨손");
			int weapon = sc.nextInt();
			int player_Speed = 0, player_Power = 0;
			switch (weapon) {
			case 1:
				// 플레이어가 단검을 선택했을 때
				player_Speed = 2;
				player_Power = 2;
				break;
			case 2:
				// 플레이어가 도끼를 선택했을 때
				player_Speed = 3;
				player_Power = 3;
				break;
			case 3:
				// 플레이어가 맨손을 선택했을 때
				player_Speed = 1;
				player_Power = 1;
				break;
			default:
				// 플레이어가 아무것도 선택하지 않았을 때
				System.out.println("무기를 선택하지 않았습니다.");
				break;
			}

			pl.name = name;
			pl.hp = 10;
			pl.power = player_Power;
			pl.speed = player_Speed;
			pl.item.add("회복 물약"); // 기본적으로 회복 물약 1개를 지급

			System.out.println("모험을 시작합니다.");
		}

		// 플레이어가 모험을 시작하지 않았을 때
		else {
			System.out.println("다시 와주실 거라 믿습니다.. 마을을 지켜주십쇼...");
			return;
		}

		// 각 스테이지를 표시할 변수
		int stage = 1;
		System.out.println("==========================================\n==========================================");
		System.out.println(stage + "번 방에 들어왔습니다...");

		// 스테이지 시작
		for (Creature a : monster) {
			System.out.println(a.name + "이 나타났습니다!");
			System.out.println("==========================================");
			System.out.println(pl);
			System.out.println(a);
			System.out.println("==========================================");

			// 대결 시작
			while (pl.hp > 0 && a.hp > 0) {
				System.out.println("무엇을 하시겠습니까?\n1. 공격 2. 아이템 사용 3. 포기");
				answer = sc.nextInt();
				switch (answer) {

				// 플레이어가 공격하기를 선택했다면
				case 1:

					// 플레이어와 적 중 스피드가 더 빠른 쪽이 먼저 공격, 둘 중 하나라도 먼저 체력이 0 이하라면 게임을 종료
					if (pl.speed > a.speed) {
						Creature.attack(pl, a);
						if (a.hp <= 0)
							break;
						Creature.attack(a, pl);
						if (pl.hp <= 0)
							break;
					} else {
						Creature.attack(a, pl);
						if (pl.hp <= 0)
							break;
						Creature.attack(pl, a);
						if (a.hp <= 0)
							break;
					}
					break;

				// 플레이어가 아이템을 사용하기를 선택했다면
				case 2:

					// 만약 아이템이 없다면 패스
					if (pl.item.size() == 0)
						System.out.println("아이템이 없습니다.");
					else {

						// 플레이어와 적 중 스피드가 더 빠른 쪽이 먼저 공격, 둘 중 하나라도 먼저 체력이 0 이하라면 게임을 종료
						if (pl.speed > a.speed) {
							System.out.println("어떤 아이템을 사용하시겠습니까?");
							int n = 1;
							for (String i : pl.item) {
								System.out.print(n++ + ". " + i + " ");
							}
							int item_Answer = sc.nextInt();
							switch (pl.item.get(item_Answer - 1)) {
							case "회복 물약":
								pl.hp += 3;
								System.out.println("아이템을 사용했습니다.");
								break;
							case "스피드 업 물약":
								pl.speed += 1;
								System.out.println("아이템을 사용했습니다.");
								break;
							case "공격력 업 물약":
								pl.power += 1;
								System.out.println("아이템을 사용했습니다.");
								break;
							default:
								System.out.println("그런 아이템은 없습니다.");
								break;
							}
							// 플레이어가 선택한 아이템을 목록에서 삭제
							pl.item.remove(item_Answer - 1);
							// 플레이어가 물약을 사용했으므로 다음 턴은 몬스터이므로 몬스터가 플레이어 공격
							Creature.attack(a, pl);
							if (pl.hp <= 0)
								break;
						} else {
							Creature.attack(a, pl);
							if (pl.hp <= 0)
								break;
							System.out.println("어떤 아이템을 사용하시겠습니까?");
							int n = 1;
							for (String i : pl.item) {
								System.out.print(n++ + ". " + i + " ");
							}
							int item_Answer = sc.nextInt();
							switch (pl.item.get(item_Answer - 1)) {
							case "회복 물약":
								pl.hp += 3;
								break;
							case "스피드 업 물약":
								pl.speed += 1;
								break;
							case "공격력 업 물약":
								pl.power += 1;
								break;
							default:
								break;
							}
							System.out.println(pl.item.get(item_Answer - 1) + "을 사용했습니다.");
							pl.item.remove(item_Answer - 1);
							break;
						}
					}
					break;
				default:
					// 플레이어가 포기를 선택하면 플레이어는 아무것도 하지 않고 몬스터만 플레이어를 공격
					Creature.attack(a, pl);
					break;
				}

				// 플레이어가 체력이 0 이하로 스테이지가 종료되면 기절되었다고 출력하고 게임을 나간다.
				if (pl.hp <= 0) {
					System.out.println(a.name + "의 공격으로 기절하였습니다...");
					Endstory.defeatStroy();
					return;
				}

				// 적의 체력이 0 이하로 스테이지가 종료되면 적을 물리쳤다고 출력하고 다음 스테이지로 넘어간다.
				else if (a.hp <= 0)
					System.out.println(a.name + "을 물리쳤습니다! 다음 방으로 이동합니다...");
				else {
					System.out.println("==========================================");
					System.out.println(pl);
					System.out.println(a);
					System.out.println("==========================================");

				}
			}

			// 스테이지가 종료될 때 마다 랜덤한 아이템 획득 가능
			System.out.println("상자가 떨어져 있습니다. 주우시겠습니까?(1: YES, 2: NO)");
			answer = sc.nextInt();
			if (answer == 1) {
				int random_Item = (int) (Math.random() * 4);
				if (random_Item == 0) {
					// 상자에 회복 물약이 들어있으면 플레이어 아이템에 회복 물약 추가
					pl.item.add("회복 물약");
					System.out.println("회복 물약을 획득하였습니다.");
				} else if (random_Item == 1) {
					// 상자에 스피드 업 물약이 들어있으면 플레이어 아이템에 스피드 업 물약 추가
					pl.item.add("스피드 업 물약");
					System.out.println("스피드 업 물약을 획득하였습니다.");
				} else if (random_Item == 2) {
					// 상자에 공격력 업 물약이 들어있으면 플레이어 아이템에 공격력 업 물약 추가
					pl.item.add("공격력 업 물약");
					System.out.println("공격력 업 물약을 획득하였습니다.");
				} else {
					System.out.println("빈 상자였습니다.");
				}
			}
			System.out
					.println("==========================================\n==========================================");
			stage++;
			System.out.println(stage + "번 방에 들어왔습니다...");

		}
		if (pl.hp > 0)
			Endstory.winStory();
	}

}
